name: Reliability Workflow

on:
  push:
    branches:
      - main

jobs:
  installDevDeps:
    name: Install Development Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create empty .env file for docker tools
        run: touch ./docker/.env
      - name: Loading Production Composer Dependency Cache
        id: composer-dev-dependencies
        uses: actions/cache@v2
        with:
          path: app/vendor
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
      - name: Build Composer Development Dependencies
        if: steps.composer-dev-dependencies.outputs.cache-hit != 'true'
        run: ./scripts/composer install

  installProdDeps:
    name: Install Production Dependencies
    runs-on: ubuntu-latest
    env:
      APP_ENV: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create empty .env file for docker tools
        run: touch ./docker/.env
      - name: Loading Production Composer Dependency Cache
        id: composer-prod-dependencies
        uses: actions/cache@v2
        with:
          path: app/vendor
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
      - name: Dump Environment Variables
        run: ./scripts/composer dump-env prod --empty
      - name: Build Composer Production Dependencies
        if: steps.composer-prod-dependencies.outputs.cache-hit != 'true'
        run: ./scripts/composer install --no-dev --optimize-autoloader

  runPhpUnitTestsWithCoverage:
    name: Run PhpUnit with Coverage
    runs-on: ubuntu-latest
    needs:
      - installDevDeps
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Create empty .env file for docker tools
        run: touch ./docker/.env
      - name: Loading Development Composer Dependency Cache
        uses: actions/cache@v2
        with:
          path: app/vendor
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
      - name: Loading Coverage Cache
        id: phpunit-coverage
        uses: actions/cache@v2
        with:
          path: app/coverage
          key: ${{ runner.os }}-${{ hashFiles('**/(src|test)') }}
      - name: Run PhpUnit Tests with Coverage
        if: steps.phpunit-coverage.outputs.cache-hit != 'true'
        run: ./scripts/phpunit
      - name: Run PhpUnit Tests with Coverage
        run: ./scripts/phpunit
      - name: Analyze with SonarCloud
        if: steps.phpunit-coverage.outputs.cache-hit != 'true'
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: app
          args: >
            -Dsonar.branch.name=${GITHUB_REF#refs/heads/})
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.php.coverage.reportPaths=coverage/coverage.xml
